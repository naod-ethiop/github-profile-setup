
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.email in ['admin@bingo-game.com', 'support@bingo-game.com'];
    }

    // Users: allow each user to read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && 
                   request.auth.uid == userId &&
                   request.resource.data.keys().hasAll(['email', 'displayName', 'createdAt']);
    }

    // Wallets: allow users to read their own wallet, server to write
    match /wallets/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && 
                   request.auth.uid == userId &&
                   request.resource.data.balance >= 0;
      // Allow server operations (no auth context) - be careful with this in production
      allow write: if request.auth == null;
    }

    // Transactions: allow users to read their own, server to write
    match /transactions/{transactionId} {
      allow read: if request.auth != null && 
                  (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.userId &&
                    request.resource.data.amount > 0;
      // Allow server operations for payment processing
      allow create, update: if request.auth == null;
    }

    // Game rooms: allow authenticated users to read and create with validation
    match /gameRooms/{gameRoomId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.hostId &&
                    request.resource.data.keys().hasAll(['name', 'hostId', 'entryFee', 'maxPlayers']);
      allow update: if request.auth != null && 
                    (request.auth.uid == resource.data.hostId || 
                     request.auth.uid in resource.data.get('players', []).map(['userId'], path => path.get(['userId'])));
    }

    // Payments: allow server operations and user read access
    match /payments/{paymentId} {
      allow read: if request.auth != null && 
                  (request.auth.uid == resource.data.userId || isAdmin());
      allow write: if request.auth == null;
    }

    // Revenue tracking (admin and server only)
    match /revenue_tracking/{docId} {
      allow read: if isAdmin();
      allow write: if request.auth == null || isAdmin();
    }

    // Daily revenue (admin and server only)
    match /daily_revenue/{docId} {
      allow read: if isAdmin();
      allow write: if request.auth == null || isAdmin();
    }

    // Game history collection
    match /game_history/{gameId} {
      allow read: if request.auth != null;
      allow write: if request.auth == null;
    }

    // User sessions for better security
    match /user_sessions/{sessionId} {
      allow read, write: if request.auth != null && 
                        request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && 
                    request.auth.uid == resource.data.userId;
    }
  }
}
